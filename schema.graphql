type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type User {
  id: ID!
  name: String!
}

type Query {
  todos(id: ID): [Todo!]!
  namespaces(name: String): [Namespace]!
}

input NewTodo {
  text: String!
  userId: String!
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
}

type Namespace {
  name: String!
  kmakes(name: String): [Kmake]!
}

type Kmake {
  name: String!
  variables: [Variable]!
  rules: [Rule]!
  status: String!
}

type Variable {
  name: String!
  value: String!
}

type Rule {
  targets:       [String]!
  doublecolon:   Boolean!
  commands:      [String]!
  prereqs:       [String]!
  targetpattern: String!
}

type KmakeRun {
  name: String!
  status: String!
  operation: KmakeRunOperation!
}

union KmakeRunOperation = 	Job | Dummy| FileWait

type Job {
  targets: [String]!
  image: String!
  command: String!
  args: [String!]
}

type Dummy {
  _: String!
}

type FileWait {
  files: [String!]
}

