type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type User {
  id: ID!
  name: String!
}

type Query {
  todos(id: ID): [Todo!]!
  namespaces(name: String): [Namespace]!
}

input NewTodo {
  text: String!
  userId: String!
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
}

type Namespace {
  name: String!
  kmakes(name: String): [Kmake]!
}

type Kmake {
  name: String!
  variables: [Variable]!
  rules: [Rule]!
  status: KmakeStatus!
  runs(name: String): [KmakeRun]!
}

type Variable {
  name: String!
  value: String!
}

type Rule {
  targets:       [String]!
  doublecolon:   Boolean!
  commands:      [String]!
  prereqs:       [String]!
  targetpattern: String!
}

type KmakeStatus {
  status: String!
}

type KmakeRun {
  name: String!
  runstatus: KmakeRunStatus!
#   operation: KmakeRunOperation!
}

type KmakeRunStatus {
  status: String!
}

# type KmakeRunOperation {
#   job: Job 
#   dummy: Dummy
#   filewait: FileWait
# }

# type Job {
#   targets: [String]!
#   image: String!
#   command: String!
#   args: [String!]
# }

# type Dummy {
#   dummy: String!
# }

# type FileWait {
#   files: [String!]
# }

