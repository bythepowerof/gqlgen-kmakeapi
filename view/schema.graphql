
type Query {
  namespaces(name: String): [Namespace]!
  kmakes(namespace: String!, kmake: String): [Kmake]!
  kmakeruns(namespace: String!, kmake: String, jobtype: JobType, kmakerun: String): [KmakeRun]!
}

# type Mutation {
# }

type Namespace {
  name: String!
  kmakes(name: String): [Kmake]!
}

enum JobType {
  JOB
  DUMMY
  FILEWAIT
}

type Kmake {
  name: String!
  variables: [KV]!
  rules: [Rule]!
  status: String!
  runs(jobtype: JobType, name: String): [KmakeRun]!
}

type KV {
  key: String!
  value: String!
}

type Rule {
  targets:       [String]!
  doublecolon:   Boolean!
  commands:      [String]!
  prereqs:       [String]!
  targetpattern: String!
}

type KmakeRun {
  name: String!
  kmakename: String
  status: String!
  operation: KmakeRunOperation
}


type KmakeRunOperation {
  job: KmakeRunJob 
  dummy: KmakeRunDummy
  filewait: KmakeRunFileWait
}

type KmakeRunJob {
  targets: [String]!
  image: String!
  command: [String]
  args: [String]
}

type KmakeRunDummy {
  dummy: String!
}

type KmakeRunFileWait {
  files: [String!]
}

