
type Query {
  namespaces(name: String): [Namespace]!
  kmakes(namespace: String): [Kmake]!
  kmakeruns(namespace: String, kmake: String): [KmakeRun]!
}

# input NewTodo {
#   text: String!
#   userId: String!
# }

# type Mutation {
# }

type Namespace {
  name: String!
  kmakes(name: String): [Kmake]!
}

enum JobType {
  JOB
  DUMMY
  FILEWAIT
}

type Kmake {
  name: String!
  variables: [Variable]!
  rules: [Rule]!
  status: KmakeStatus!
  runs(jobtype: JobType, name: String): [KmakeRun]!
}

type Variable {
  name: String!
  value: String!
}

type Rule {
  targets:       [String]!
  doublecolon:   Boolean!
  commands:      [String]!
  prereqs:       [String]!
  targetpattern: String!
}

type KmakeStatus {
  status: String!
}

type KmakeRun {
  name: String!
  runstatus: KmakeRunStatus!
  operation: KmakeRunOperation
}

type KmakeRunStatus {
  status: String!
}

type KmakeRunOperation {
  job: KmakeRunJob 
  dummy: KmakeRunDummy
  filewait: KmakeRunFileWait
}

type KmakeRunJob {
  targets: [String]!
  image: String!
  command: [String]
  args: [String]
}

type KmakeRunDummy {
  dummy: String!
}

type KmakeRunFileWait {
  files: [String!]
}

