package gqlgen_kmakeapi

import (
	"context"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"github.com/bythepowerof/gqlgen-kmakeapi/controller"
	"github.com/bythepowerof/gqlgen-kmakeapi/k8s"
	k8sclient "sigs.k8s.io/controller-runtime/pkg/client"
)

var _ = Describe("Fake client", func() {
	var k k8sclient.Client
	var fo *k8s.FakeObjects
	var r MutationResolver

	BeforeEach(func() {
		var err error
		fo = &k8s.FakeObjects{}

		k, err = fo.FakeK8sClient()
		Expect(err).To(BeNil())

		res := &Resolver{
			KmakeController: &controller.KubernetesController{
				Client: k,
			},
		}
		r = res.Mutation()
	})

	Describe("with Mutation method", func() {
		Context("should be able to get", func() {

			It("Reset", func() {
				reset, err := r.Reset(context.Background(), fo.FakeReset())
				Expect(err).To(BeNil())
				Expect(len(reset)).To(Equal(1))
			})

			It("Stop", func() {
				stop, err := r.Stop(context.Background(), fo.FakeStop())
				Expect(err).To(BeNil())
				Expect(len(stop)).To(Equal(1))
			})

			It("Restart", func() {
				restart, err := r.Restart(context.Background(), fo.FakeRestart())
				Expect(err).To(BeNil())
				Expect(len(restart)).To(Equal(1))
			})

			//+ Methods Here
		})
	})
})
