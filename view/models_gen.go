// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen_kmakeapi

import (
	"fmt"
	"io"
	"strconv"
)

type NewJwt struct {
	User  string   `json:"user"`
	Roles []string `json:"roles"`
}

type Rbac string

const (
	RbacQuery       Rbac = "QUERY"
	RbacReset       Rbac = "RESET"
	RbacRestartStop Rbac = "RESTART_STOP"
)

var AllRbac = []Rbac{
	RbacQuery,
	RbacReset,
	RbacRestartStop,
}

func (e Rbac) IsValid() bool {
	switch e {
	case RbacQuery, RbacReset, RbacRestartStop:
		return true
	}
	return false
}

func (e Rbac) String() string {
	return string(e)
}

func (e *Rbac) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Rbac(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RBAC", str)
	}
	return nil
}

func (e Rbac) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
